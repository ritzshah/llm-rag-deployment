apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    pipelines.kubeflow.org/run_name: sanity check
    tekton.dev/artifact_items: >-
      {"run-a-file": [["mlpipeline-metrics", "/tmp/mlpipeline-metrics.json"],
      ["mlpipeline-ui-metadata", "/tmp/mlpipeline-ui-metadata.json"]],
      "run-a-file-2": [["mlpipeline-metrics", "/tmp/mlpipeline-metrics.json"],
      ["mlpipeline-ui-metadata", "/tmp/mlpipeline-ui-metadata.json"]],
      "run-a-file-3": [["mlpipeline-metrics", "/tmp/mlpipeline-metrics.json"],
      ["mlpipeline-ui-metadata", "/tmp/mlpipeline-ui-metadata.json"]],
      "run-a-file-4": [["mlpipeline-metrics", "/tmp/mlpipeline-metrics.json"],
      ["mlpipeline-ui-metadata", "/tmp/mlpipeline-ui-metadata.json"]],
      "run-a-file-5": [["mlpipeline-metrics", "/tmp/mlpipeline-metrics.json"],
      ["mlpipeline-ui-metadata", "/tmp/mlpipeline-ui-metadata.json"]],
      "run-a-file-6": [["mlpipeline-metrics", "/tmp/mlpipeline-metrics.json"],
      ["mlpipeline-ui-metadata", "/tmp/mlpipeline-ui-metadata.json"]]}
    tekton.dev/artifact_bucket: pipeline
    tekton.dev/template: ''
    sidecar.istio.io/inject: 'false'
    chains.tekton.dev/signed: 'true'
    tekton.dev/artifact_endpoint_scheme: 'http://'
    tekton.dev/output_artifacts: >-
      {"run-a-file": [{"key":
      "artifacts/$PIPELINERUN/run-a-file/mlpipeline-metrics.tgz", "name":
      "mlpipeline-metrics", "path": "/tmp/mlpipeline-metrics.json"}, {"key":
      "artifacts/$PIPELINERUN/run-a-file/mlpipeline-ui-metadata.tgz", "name":
      "mlpipeline-ui-metadata", "path": "/tmp/mlpipeline-ui-metadata.json"}],
      "run-a-file-2": [{"key":
      "artifacts/$PIPELINERUN/run-a-file-2/mlpipeline-metrics.tgz", "name":
      "mlpipeline-metrics", "path": "/tmp/mlpipeline-metrics.json"}, {"key":
      "artifacts/$PIPELINERUN/run-a-file-2/mlpipeline-ui-metadata.tgz", "name":
      "mlpipeline-ui-metadata", "path": "/tmp/mlpipeline-ui-metadata.json"}],
      "run-a-file-3": [{"key":
      "artifacts/$PIPELINERUN/run-a-file-3/mlpipeline-metrics.tgz", "name":
      "mlpipeline-metrics", "path": "/tmp/mlpipeline-metrics.json"}, {"key":
      "artifacts/$PIPELINERUN/run-a-file-3/mlpipeline-ui-metadata.tgz", "name":
      "mlpipeline-ui-metadata", "path": "/tmp/mlpipeline-ui-metadata.json"}],
      "run-a-file-4": [{"key":
      "artifacts/$PIPELINERUN/run-a-file-4/mlpipeline-metrics.tgz", "name":
      "mlpipeline-metrics", "path": "/tmp/mlpipeline-metrics.json"}, {"key":
      "artifacts/$PIPELINERUN/run-a-file-4/mlpipeline-ui-metadata.tgz", "name":
      "mlpipeline-ui-metadata", "path": "/tmp/mlpipeline-ui-metadata.json"}],
      "run-a-file-5": [{"key":
      "artifacts/$PIPELINERUN/run-a-file-5/mlpipeline-metrics.tgz", "name":
      "mlpipeline-metrics", "path": "/tmp/mlpipeline-metrics.json"}, {"key":
      "artifacts/$PIPELINERUN/run-a-file-5/mlpipeline-ui-metadata.tgz", "name":
      "mlpipeline-ui-metadata", "path": "/tmp/mlpipeline-ui-metadata.json"}],
      "run-a-file-6": [{"key":
      "artifacts/$PIPELINERUN/run-a-file-6/mlpipeline-metrics.tgz", "name":
      "mlpipeline-metrics", "path": "/tmp/mlpipeline-metrics.json"}, {"key":
      "artifacts/$PIPELINERUN/run-a-file-6/mlpipeline-ui-metadata.tgz", "name":
      "mlpipeline-ui-metadata", "path": "/tmp/mlpipeline-ui-metadata.json"}]}
    tekton.dev/artifact_endpoint: 'http://minio.ic-shared-rag-minio.svc:9000'
    pipelines.kubeflow.org/pipeline_spec: '{"name": "data_sanity_check"}'
    pipelines.kubeflow.org/big_data_passing_format: >-
      $(workspaces.$TASK_NAME.path)/artifacts/data-sanity-check-c49ec/$TASKRUN_NAME/$TASK_PARAM_NAME
    tekton.dev/input_artifacts: '{}'
  name: data-sanity-check-
  uid: 9478981a-9646-40f2-8ac8-fad28f7055f7
  namespace: ic-shared-rag-llm
spec:
  pipelineSpec:
    tasks:
      - name: data-ingestion
        taskSpec:
          metadata:
            annotations:
              elyra/node-file-name: >-
                llm-on-openshift/examples/notebooks/langchain/Langchain-PgVector-Ingest.ipynb
              elyra/pipeline-source: data_sanity_check.pipeline
              pipelines.kubeflow.org/component_spec_digest: >-
                {"name": "Run a file", "outputs": [], "version": "Run a
                file@sha256=2f18f60e77e9a58dc80ac3e48f14f0b75a4fcace2bfdb77ab3cd8c15e5a49ae4"}
              pipelines.kubeflow.org/task_display_name: Data Ingestion
            labels:
              elyra/experiment-name: ''
              elyra/node-name: Data_Ingestion
              elyra/node-type: notebook-script
              elyra/pipeline-name: data_sanity_check
              elyra/pipeline-version: ''
              pipelines.kubeflow.org/cache_enabled: 'true'
          spec: null
          stepTemplate:
            name: ''
            resources: {}
            volumeMounts:
              - mountPath: /tmp
                name: mlpipeline-metrics
          steps:
            - args:
                - >
                  sh -c "mkdir -p ./jupyter-work-dir && cd ./jupyter-work-dir"

                  sh -c "echo 'Downloading
                  file:///opt/app-root/bin/utils/bootstrapper.py' && curl --fail
                  -H 'Cache-Control: no-cache' -L
                  file:///opt/app-root/bin/utils/bootstrapper.py --output
                  bootstrapper.py"

                  sh -c "echo 'Downloading
                  file:///opt/app-root/bin/utils/requirements-elyra.txt' && curl
                  --fail -H 'Cache-Control: no-cache' -L
                  file:///opt/app-root/bin/utils/requirements-elyra.txt --output
                  requirements-elyra.txt"

                  sh -c "python3 -m pip install  packaging && python3 -m pip
                  freeze > requirements-current.txt && python3 bootstrapper.py
                  --pipeline-name 'data_sanity_check' --cos-endpoint
                  'http://minio.ic-shared-rag-minio.svc.cluster.local:9000/'
                  --cos-bucket 'pipeline' --cos-directory
                  'pipeline-code' --cos-dependencies-archive
                  'Langchain-PgVector-Ingest.tar.gz'
                  --file
                  'llm-on-openshift/examples/notebooks/langchain/Langchain-PgVector-Ingest.ipynb'
                  "
              command:
                - sh
                - '-c'
              env:
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      key: AWS_ACCESS_KEY_ID
                      name: aws-connection-shared-minio---pipelines
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: AWS_SECRET_ACCESS_KEY
                      name: aws-connection-shared-minio---pipelines
                - name: ELYRA_RUNTIME_ENV
                  value: kfp
                - name: ELYRA_ENABLE_PIPELINE_INFO
                  value: 'True'
                - name: ELYRA_WRITABLE_CONTAINER_DIR
                  value: /tmp
                - name: ELYRA_RUN_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: 'metadata.annotations[''pipelines.kubeflow.org/run_name'']'
              image: >-
                quay.io/modh/runtime-images@sha256:7dd23e58291cad7a0ab4a8e04bda06492f2c027eb33b226358380db58dcdd60b
              name: main
              resources: {}
          volumes:
            - emptyDir: {}
              name: mlpipeline-metrics
      - name: data-verification
        runAfter:
          - data-ingestion
        taskSpec:
          metadata:
            annotations:
              elyra/node-file-name: >-
                llm-on-openshift/examples/notebooks/langchain/Langchain-PgVector-Query.ipynb
              elyra/pipeline-source: data_sanity_check.pipeline
              pipelines.kubeflow.org/component_spec_digest: >-
                {"name": "Run a file", "outputs": [], "version": "Run a
                file@sha256=3931977936682f01ee0110156e23cdb0662d1f6acae17255327b5bedfda76f82"}
              pipelines.kubeflow.org/task_display_name: Data Verification
            labels:
              elyra/experiment-name: ''
              elyra/node-name: Data_Verification
              elyra/node-type: notebook-script
              elyra/pipeline-name: data_sanity_check
              elyra/pipeline-version: ''
              pipelines.kubeflow.org/cache_enabled: 'true'
          spec: null
          stepTemplate:
            name: ''
            resources: {}
            volumeMounts:
              - mountPath: /tmp
                name: mlpipeline-metrics
          steps:
            - args:
                - >
                  sh -c "mkdir -p ./jupyter-work-dir && cd ./jupyter-work-dir"

                  sh -c "echo 'Downloading
                  file:///opt/app-root/bin/utils/bootstrapper.py' && curl --fail
                  -H 'Cache-Control: no-cache' -L
                  file:///opt/app-root/bin/utils/bootstrapper.py --output
                  bootstrapper.py"

                  sh -c "echo 'Downloading
                  file:///opt/app-root/bin/utils/requirements-elyra.txt' && curl
                  --fail -H 'Cache-Control: no-cache' -L
                  file:///opt/app-root/bin/utils/requirements-elyra.txt --output
                  requirements-elyra.txt"

                  sh -c "python3 -m pip install  packaging && python3 -m pip
                  freeze > requirements-current.txt && python3 bootstrapper.py
                  --pipeline-name 'data_sanity_check' --cos-endpoint
                  'http://minio.ic-shared-rag-minio.svc.cluster.local:9000/'
                  --cos-bucket 'pipeline' --cos-directory
                  'pipeline-code' --cos-dependencies-archive
                  'Langchain-PgVector-Query.tar.gz'
                  --file
                  'llm-on-openshift/examples/notebooks/langchain/Langchain-PgVector-Query.ipynb'
                  "
              command:
                - sh
                - '-c'
              env:
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      key: AWS_ACCESS_KEY_ID
                      name: aws-connection-shared-minio---pipelines
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: AWS_SECRET_ACCESS_KEY
                      name: aws-connection-shared-minio---pipelines
                - name: ELYRA_RUNTIME_ENV
                  value: kfp
                - name: ELYRA_ENABLE_PIPELINE_INFO
                  value: 'True'
                - name: ELYRA_WRITABLE_CONTAINER_DIR
                  value: /tmp
                - name: ELYRA_RUN_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: 'metadata.annotations[''pipelines.kubeflow.org/run_name'']'
              image: >-
                quay.io/modh/runtime-images@sha256:7dd23e58291cad7a0ab4a8e04bda06492f2c027eb33b226358380db58dcdd60b
              name: main
              resources: {}
          volumes:
            - emptyDir: {}
              name: mlpipeline-metrics
      - name: response-quality
        runAfter:
          - data-verification
        taskSpec:
          metadata:
            annotations:
              elyra/node-file-name: >-
                insurance-claim-processing/lab-materials/03/06/test_response_quality.py
              elyra/pipeline-source: data_sanity_check.pipeline
              pipelines.kubeflow.org/component_spec_digest: >-
                {"name": "Run a file", "outputs": [], "version": "Run a
                file@sha256=549d0a3b3257bc2b32492b25e65121c6f0a0ddc561beb12325248ad552819b4d"}
              pipelines.kubeflow.org/task_display_name: test_response_quality
            labels:
              elyra/experiment-name: ''
              elyra/node-name: test_response_quality
              elyra/node-type: notebook-script
              elyra/pipeline-name: data_sanity_check
              elyra/pipeline-version: ''
              pipelines.kubeflow.org/cache_enabled: 'true'
          spec: null
          stepTemplate:
            name: ''
            resources: {}
            volumeMounts:
              - mountPath: /tmp
                name: mlpipeline-metrics
          steps:
            - args:
                - >
                  sh -c "mkdir -p ./jupyter-work-dir && cd ./jupyter-work-dir"

                  sh -c "echo 'Downloading
                  file:///opt/app-root/bin/utils/bootstrapper.py' && curl --fail
                  -H 'Cache-Control: no-cache' -L
                  file:///opt/app-root/bin/utils/bootstrapper.py --output
                  bootstrapper.py"

                  sh -c "echo 'Downloading
                  file:///opt/app-root/bin/utils/requirements-elyra.txt' && curl
                  --fail -H 'Cache-Control: no-cache' -L
                  file:///opt/app-root/bin/utils/requirements-elyra.txt --output
                  requirements-elyra.txt"

                  sh -c "python3 -m pip install  packaging && python3 -m pip
                  freeze > requirements-current.txt && python3 bootstrapper.py
                  --pipeline-name 'data_sanity_check' --cos-endpoint
                  'http://minio.ic-shared-rag-minio.svc.cluster.local:9000/'
                  --cos-bucket 'pipeline' --cos-directory
                  'pipeline-code' --cos-dependencies-archive
                  'test_response_quality.tar.gz'
                  --file
                  'insurance-claim-processing/lab-materials/03/06/test_response_quality.py'
                  --outputs 'quality_result.json' "
              command:
                - sh
                - '-c'
              env:
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      key: AWS_ACCESS_KEY_ID
                      name: aws-connection-shared-minio---pipelines
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: AWS_SECRET_ACCESS_KEY
                      name: aws-connection-shared-minio---pipelines
                - name: ELYRA_RUNTIME_ENV
                  value: kfp
                - name: ELYRA_ENABLE_PIPELINE_INFO
                  value: 'True'
                - name: ELYRA_WRITABLE_CONTAINER_DIR
                  value: /tmp
                - name: ELYRA_RUN_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: 'metadata.annotations[''pipelines.kubeflow.org/run_name'']'
              image: >-
                quay.io/rh-aiservices-bu/rhoai-lab-insurance-claim-sanity-pipeline:1.0
              name: main
              resources: {}
          volumes:
            - emptyDir: {}
              name: mlpipeline-metrics
      - name: response-time
        runAfter:
          - data-verification
        taskSpec:
          metadata:
            annotations:
              elyra/node-file-name: >-
                insurance-claim-processing/lab-materials/03/06/test_responsetime.py
              elyra/pipeline-source: data_sanity_check.pipeline
              pipelines.kubeflow.org/component_spec_digest: >-
                {"name": "Run a file", "outputs": [], "version": "Run a
                file@sha256=db697331967aabaa76bcb89e038df9d4f2d0be061deaf678f2fe6817ff7ee43d"}
              pipelines.kubeflow.org/task_display_name: test_responsetime
            labels:
              elyra/experiment-name: ''
              elyra/node-name: test_responsetime
              elyra/node-type: notebook-script
              elyra/pipeline-name: data_sanity_check
              elyra/pipeline-version: ''
              pipelines.kubeflow.org/cache_enabled: 'true'
          spec: null
          stepTemplate:
            name: ''
            resources: {}
            volumeMounts:
              - mountPath: /tmp
                name: mlpipeline-metrics
          steps:
            - args:
                - >
                  sh -c "mkdir -p ./jupyter-work-dir && cd ./jupyter-work-dir"

                  sh -c "echo 'Downloading
                  file:///opt/app-root/bin/utils/bootstrapper.py' && curl --fail
                  -H 'Cache-Control: no-cache' -L
                  file:///opt/app-root/bin/utils/bootstrapper.py --output
                  bootstrapper.py"

                  sh -c "echo 'Downloading
                  file:///opt/app-root/bin/utils/requirements-elyra.txt' && curl
                  --fail -H 'Cache-Control: no-cache' -L
                  file:///opt/app-root/bin/utils/requirements-elyra.txt --output
                  requirements-elyra.txt"

                  sh -c "python3 -m pip install  packaging && python3 -m pip
                  freeze > requirements-current.txt && python3 bootstrapper.py
                  --pipeline-name 'data_sanity_check' --cos-endpoint
                  'http://minio.ic-shared-rag-minio.svc.cluster.local:9000/'
                  --cos-bucket 'pipeline' --cos-directory
                  'pipeline-code' --cos-dependencies-archive
                  'test_responsetime.tar.gz'
                  --file
                  'insurance-claim-processing/lab-materials/03/06/test_responsetime.py'
                  --outputs 'responsetime_result.json' "
              command:
                - sh
                - '-c'
              env:
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      key: AWS_ACCESS_KEY_ID
                      name: aws-connection-shared-minio---pipelines
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: AWS_SECRET_ACCESS_KEY
                      name: aws-connection-shared-minio---pipelines
                - name: ELYRA_RUNTIME_ENV
                  value: kfp
                - name: ELYRA_ENABLE_PIPELINE_INFO
                  value: 'True'
                - name: ELYRA_WRITABLE_CONTAINER_DIR
                  value: /tmp
                - name: ELYRA_RUN_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: 'metadata.annotations[''pipelines.kubeflow.org/run_name'']'
              image: >-
                quay.io/modh/runtime-images@sha256:7dd23e58291cad7a0ab4a8e04bda06492f2c027eb33b226358380db58dcdd60b
              name: main
              resources: {}
          volumes:
            - emptyDir: {}
              name: mlpipeline-metrics
      - name: security-check
        runAfter:
          - data-verification
        taskSpec:
          metadata:
            annotations:
              elyra/node-file-name: insurance-claim-processing/lab-materials/03/06/test_security.py
              elyra/pipeline-source: data_sanity_check.pipeline
              pipelines.kubeflow.org/component_spec_digest: >-
                {"name": "Run a file", "outputs": [], "version": "Run a
                file@sha256=5f1b6e360aa5b3d30688b0f2db840fbe0c9e87fc3d625f74c818643589656018"}
              pipelines.kubeflow.org/task_display_name: test_security
            labels:
              elyra/experiment-name: ''
              elyra/node-name: test_security
              elyra/node-type: notebook-script
              elyra/pipeline-name: data_sanity_check
              elyra/pipeline-version: ''
              pipelines.kubeflow.org/cache_enabled: 'true'
          spec: null
          stepTemplate:
            name: ''
            resources: {}
            volumeMounts:
              - mountPath: /tmp
                name: mlpipeline-metrics
          steps:
            - args:
                - >
                  sh -c "mkdir -p ./jupyter-work-dir && cd ./jupyter-work-dir"

                  sh -c "echo 'Downloading
                  file:///opt/app-root/bin/utils/bootstrapper.py' && curl --fail
                  -H 'Cache-Control: no-cache' -L
                  file:///opt/app-root/bin/utils/bootstrapper.py --output
                  bootstrapper.py"

                  sh -c "echo 'Downloading
                  file:///opt/app-root/bin/utils/requirements-elyra.txt' && curl
                  --fail -H 'Cache-Control: no-cache' -L
                  file:///opt/app-root/bin/utils/requirements-elyra.txt --output
                  requirements-elyra.txt"

                  sh -c "python3 -m pip install  packaging && python3 -m pip
                  freeze > requirements-current.txt && python3 bootstrapper.py
                  --pipeline-name 'data_sanity_check' --cos-endpoint
                  'http://minio.ic-shared-rag-minio.svc.cluster.local:9000/'
                  --cos-bucket 'pipeline' --cos-directory
                  'pipeline-code' --cos-dependencies-archive
                  'test_security.tar.gz'
                  --file
                  'insurance-claim-processing/lab-materials/03/06/test_security.py'
                  --outputs 'security_result.json' "
              command:
                - sh
                - '-c'
              env:
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      key: AWS_ACCESS_KEY_ID
                      name: aws-connection-shared-minio---pipelines
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: AWS_SECRET_ACCESS_KEY
                      name: aws-connection-shared-minio---pipelines
                - name: ELYRA_RUNTIME_ENV
                  value: kfp
                - name: ELYRA_ENABLE_PIPELINE_INFO
                  value: 'True'
                - name: ELYRA_WRITABLE_CONTAINER_DIR
                  value: /tmp
                - name: ELYRA_RUN_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: 'metadata.annotations[''pipelines.kubeflow.org/run_name'']'
              image: >-
                quay.io/modh/runtime-images@sha256:7dd23e58291cad7a0ab4a8e04bda06492f2c027eb33b226358380db58dcdd60b
              name: main
              resources: {}
          volumes:
            - emptyDir: {}
              name: mlpipeline-metrics
      - name: summary-report
        runAfter:
          - response-quality
          - response-time
          - security-check
        taskSpec:
          metadata:
            annotations:
              elyra/node-file-name: >-
                insurance-claim-processing/lab-materials/03/06/summarize_results.py
              elyra/pipeline-source: data_sanity_check.pipeline
              pipelines.kubeflow.org/component_spec_digest: >-
                {"name": "Run a file", "outputs": [], "version": "Run a
                file@sha256=1fa8786a7536d85d3c070639062456d8480712f81def230dd8994590f64e6684"}
              pipelines.kubeflow.org/task_display_name: summarize_results
            labels:
              elyra/experiment-name: ''
              elyra/node-name: summarize_results
              elyra/node-type: notebook-script
              elyra/pipeline-name: data_sanity_check
              elyra/pipeline-version: ''
              pipelines.kubeflow.org/cache_enabled: 'true'
          spec: null
          stepTemplate:
            name: ''
            resources: {}
            volumeMounts:
              - mountPath: /tmp
                name: mlpipeline-metrics
          steps:
            - args:
                - >
                  sh -c "mkdir -p ./jupyter-work-dir && cd ./jupyter-work-dir"

                  sh -c "echo 'Downloading
                  file:///opt/app-root/bin/utils/bootstrapper.py' && curl --fail
                  -H 'Cache-Control: no-cache' -L
                  file:///opt/app-root/bin/utils/bootstrapper.py --output
                  bootstrapper.py"

                  sh -c "echo 'Downloading
                  file:///opt/app-root/bin/utils/requirements-elyra.txt' && curl
                  --fail -H 'Cache-Control: no-cache' -L
                  file:///opt/app-root/bin/utils/requirements-elyra.txt --output
                  requirements-elyra.txt"

                  sh -c "python3 -m pip install  packaging && python3 -m pip
                  freeze > requirements-current.txt && python3 bootstrapper.py
                  --pipeline-name 'data_sanity_check' --cos-endpoint
                  'http://minio.ic-shared-rag-minio.svc.cluster.local:9000/'
                  --cos-bucket 'pipeline' --cos-directory
                  'pipeline-code' --cos-dependencies-archive
                  'summarize_results.tar.gz'
                  --file
                  'insurance-claim-processing/lab-materials/03/06/summarize_results.py'
                  --inputs
                  'security_result.json;quality_result.json;responsetime_result.json'
                  --outputs 'results.json' "
              command:
                - sh
                - '-c'
              env:
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      key: AWS_ACCESS_KEY_ID
                      name: aws-connection-shared-minio---pipelines
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: AWS_SECRET_ACCESS_KEY
                      name: aws-connection-shared-minio---pipelines
                - name: ELYRA_RUNTIME_ENV
                  value: kfp
                - name: ELYRA_ENABLE_PIPELINE_INFO
                  value: 'True'
                - name: ELYRA_WRITABLE_CONTAINER_DIR
                  value: /tmp
                - name: ELYRA_RUN_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: 'metadata.annotations[''pipelines.kubeflow.org/run_name'']'
              image: >-
                quay.io/modh/runtime-images@sha256:7dd23e58291cad7a0ab4a8e04bda06492f2c027eb33b226358380db58dcdd60b
              name: main
              resources: {}
          volumes:
            - emptyDir: {}
              name: mlpipeline-metrics
  serviceAccountName: pipeline-runner-pipelines-definition
  timeout: 1h0m0s
